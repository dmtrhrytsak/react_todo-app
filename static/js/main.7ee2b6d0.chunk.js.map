{"version":3,"sources":["lib/enums/Action.ts","lib/enums/Status.ts","lib/shared/TodoContext.tsx","lib/enums/Mode.ts","lib/hooks/useLocalStorage.ts","lib/hooks/useInput.ts","components/TodoAdd/TodoAdd.tsx","components/TodoCheckBox/TodoCheckBox.tsx","components/EditTodo/EditTodo.tsx","lib/assets/icons/delete-icon.svg","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","TodoApp.tsx","index.tsx"],"names":["Action","Status","TodoContext","createContext","todoReducer","todos","action","type","ADD_TODO","id","Date","now","title","payload","completed","TOGGLE_TODO","map","todo","DELETE_TODO","filter","CHANGE_TODO","newTitle","CLEAR_COMPLETED_TODOS","COMPLETE_ALL_TODOS","Mode","TodoProvider","children","initialValue","key","useState","storage","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","useLocalStorage","todosFromStorage","setTodosFromStorage","useReducer","dispatchTodos","contextValue","useMemo","Provider","useTodoContext","context","useContext","Error","useInput","hasError","setHasError","event","inputValue","target","length","TodoAdd","className","todoTitle","hasTitleError","setHasTitleError","handleTodoTitleChange","clearTodoTitle","classNames","onSubmit","preventDefault","trimmedValue","trim","validateTodoTitle","placeholder","onChange","TodoCheckBox","isChecked","onClick","EditTodo","toggleMode","handleNewTitleChange","inputRef","useRef","useLayoutEffect","current","focus","changeTodo","VIEW","trimmedTitle","ref","onKeyDown","onBlur","TodoItem","isHoveredOn","setIsHoveredOn","mode","setMode","newMode","onMouseEnter","onMouseLeave","onDoubleClick","EDIT","src","deleteIcon","alt","TodoList","TodoFilter","to","TodoApp","useSearchParams","searchParams","visibleTodos","todoStatus","COMPLETED","UNCOMPLETED","getVisibleTodos","get","ALL","activeTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ee2b6d0.chunk.js","sourcesContent":["export enum Action {\n  ADD_TODO = 'add-todo',\n  TOGGLE_TODO = 'toggle-todo',\n  DELETE_TODO = 'delete-todo',\n  CHANGE_TODO = 'change-todo',\n  CLEAR_COMPLETED_TODOS = 'clear-completed-todoS',\n  COMPLETE_ALL_TODOS = 'complete-all-todoS',\n}\n","export enum Status {\n  ALL = 'all',\n  UNCOMPLETED = 'uncompleted',\n  COMPLETED = 'completed',\n}\n","import {\n  createContext, useContext, useEffect, useMemo, useReducer,\n} from 'react';\n\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { Action } from '../enums/Action';\nimport { ActionType } from '../types/ActionType';\nimport { ITodo } from '../types/ITodo';\n\ninterface TodoContextType {\n  todos: ITodo[];\n  dispatchTodos: React.Dispatch<ActionType>;\n}\n\nconst TodoContext = createContext<TodoContextType | null>(null);\n\nfunction todoReducer(todos: ITodo[], action: ActionType) {\n  switch (action.type) {\n    case Action.ADD_TODO:\n      return [\n        ...todos,\n        {\n          id: Date.now(),\n          title: action.payload,\n          completed: false,\n        },\n      ];\n\n    case Action.TOGGLE_TODO:\n      return todos.map((todo) => (todo.id === action.payload\n        ? { ...todo, completed: !todo.completed }\n        : todo));\n\n    case Action.DELETE_TODO:\n      return todos.filter((todo) => todo.id !== action.payload);\n\n    case Action.CHANGE_TODO:\n      return todos.map((todo) => (todo.id === action.payload.id\n        ? { ...todo, title: action.payload.newTitle }\n        : todo));\n\n    case Action.CLEAR_COMPLETED_TODOS:\n      return todos.filter((todo) => !todo.completed);\n\n    case Action.COMPLETE_ALL_TODOS:\n      return todos.map((todo) => ({ ...todo, completed: true }));\n\n    default:\n      return todos;\n  }\n}\n\nexport const TodoProvider: React.FC = ({ children }) => {\n  const [todosFromStorage, setTodosFromStorage] = useLocalStorage<ITodo[]>([], 'todos');\n  const [todos, dispatchTodos] = useReducer(todoReducer, todosFromStorage);\n\n  const contextValue = useMemo(\n    () => ({ todos, dispatchTodos }),\n    [todos, dispatchTodos],\n  );\n\n  useEffect(() => {\n    setTodosFromStorage(todos);\n  }, [todos]);\n\n  return (\n    <TodoContext.Provider value={contextValue}>{children}</TodoContext.Provider>\n  );\n};\n\nexport const useTodoContext = () => {\n  const context = useContext(TodoContext);\n\n  if (!context) {\n    throw new Error('Todo Context must be used inside a TodoProvider!');\n  }\n\n  return context;\n};\n","export enum Mode {\n  VIEW = 'view',\n  EDIT = 'edit',\n}\n","import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(initialValue: T, key: string): [T, React.Dispatch<T>] {\n  const getValue = () => {\n    const storage = localStorage.getItem(key);\n\n    if (storage) {\n      return JSON.parse(storage);\n    }\n\n    return initialValue;\n  };\n\n  const [value, setValue] = useState(getValue);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n}\n","import { useState } from 'react';\n\nconst CHARACTERS_LIMIT = 35;\n\nconst useInput = (initialValue: string) => {\n  const [value, setValue] = useState(initialValue);\n  const [hasError, setHasError] = useState(false);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputValue = event.target.value;\n\n    setHasError(false);\n\n    if (inputValue.length >= CHARACTERS_LIMIT) {\n      return;\n    }\n\n    setValue(inputValue);\n  };\n\n  const clearInput = () => {\n    setValue('');\n  };\n\n  return [value, hasError, setHasError, handleChange, clearInput] as const;\n};\n\nexport { useInput };\n","import classNames from 'classnames';\n\nimport { Action } from '../../lib/enums/Action';\nimport { useInput } from '../../lib/hooks/useInput';\nimport { useTodoContext } from '../../lib/shared/TodoContext';\n\nimport './TodoAdd.scss';\n\ntype Props = {\n  className?: string;\n};\n\nconst TodoAdd: React.FC<Props> = ({ className }) => {\n  const { dispatchTodos } = useTodoContext();\n\n  const [\n    todoTitle,\n    hasTitleError,\n    setHasTitleError,\n    handleTodoTitleChange,\n    clearTodoTitle,\n  ] = useInput('');\n\n  const validateTodoTitle = () => {\n    const trimmedValue = todoTitle.trim();\n\n    setHasTitleError(!trimmedValue);\n\n    return trimmedValue.length;\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (validateTodoTitle()) {\n      dispatchTodos({ type: Action.ADD_TODO, payload: todoTitle.trim() });\n    }\n\n    clearTodoTitle();\n  };\n\n  return (\n    <form\n      className={classNames('TodoAdd', className)}\n      onSubmit={handleSubmit}\n    >\n      <input\n        type=\"text\"\n        value={todoTitle}\n        placeholder=\"What do you need to do?\"\n        className=\"TodoAdd__input\"\n        onChange={handleTodoTitleChange}\n      />\n\n      {hasTitleError && (\n        <p className=\"TodoAdd__title-error\">Todo can&apos;t be empty</p>\n      )}\n    </form>\n  );\n};\n\nexport { TodoAdd };\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\n\nimport { Action } from '../../lib/enums/Action';\nimport { useTodoContext } from '../../lib/shared/TodoContext';\nimport { ITodo } from '../../lib/types/ITodo';\n\nimport './TodoCheckBox.scss';\n\ntype Props = {\n  id: ITodo['id'];\n  isChecked: ITodo['completed'];\n};\n\nconst TodoCheckBox: React.FC<Props> = ({ id, isChecked }) => {\n  const { dispatchTodos } = useTodoContext();\n\n  const toggle = () => {\n    dispatchTodos({ type: Action.TOGGLE_TODO, payload: id });\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={classNames('TodoCheckBox', {\n        'TodoCheckBox--checked': isChecked,\n      })}\n      onClick={toggle}\n    >\n      {isChecked && <div className=\"TodoCheckBox__inner-circle\" />}\n    </button>\n  );\n};\n\nexport { TodoCheckBox };\n","import { useRef, useLayoutEffect } from 'react';\n\nimport { useInput } from '../../lib/hooks/useInput';\nimport { useTodoContext } from '../../lib/shared/TodoContext';\nimport { ITodo } from '../../lib/types/ITodo';\nimport { Action } from '../../lib/enums/Action';\nimport { Mode } from '../../lib/enums/Mode';\n\nimport './EditTodo.scss';\n\ntype Props = {\n  id: ITodo['id'];\n  title: ITodo['title'];\n  toggleMode: (mode: Mode) => void;\n};\n\nconst EditTodo: React.FC<Props> = ({ id, title, toggleMode }) => {\n  const { dispatchTodos } = useTodoContext();\n  const [newTitle, , setHasError, handleNewTitleChange] = useInput(title);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const changeTodo = () => {\n    toggleMode(Mode.VIEW);\n\n    const trimmedTitle = newTitle.trim();\n\n    if (!trimmedTitle) {\n      setHasError(true);\n    } else {\n      dispatchTodos({ type: Action.CHANGE_TODO, payload: { id, newTitle: trimmedTitle } });\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      changeTodo();\n    } else if (event.key === 'Escape') {\n      toggleMode(Mode.VIEW);\n    }\n  };\n\n  return (\n    <input\n      type=\"text\"\n      ref={inputRef}\n      value={newTitle}\n      className=\"EditTodo\"\n      onChange={handleNewTitleChange}\n      onKeyDown={handleKeyDown}\n      onBlur={changeTodo}\n    />\n  );\n};\n\nexport { EditTodo };\n","export default __webpack_public_path__ + \"static/media/delete-icon.7c4ae41d.svg\";","import { useState } from 'react';\n\nimport { TodoCheckBox } from '../TodoCheckBox';\nimport { EditTodo } from '../EditTodo';\n\nimport { useTodoContext } from '../../lib/shared/TodoContext';\nimport { ITodo } from '../../lib/types/ITodo';\nimport { Action } from '../../lib/enums/Action';\nimport { Mode } from '../../lib/enums/Mode';\nimport deleteIcon from '../../lib/assets/icons/delete-icon.svg';\n\nimport './TodoItem.scss';\n\ntype Props = {} & ITodo;\n\nconst TodoItem: React.FC<Props> = ({ id, title, completed }) => {\n  const { dispatchTodos } = useTodoContext();\n  const [isHoveredOn, setIsHoveredOn] = useState(false);\n  const [mode, setMode] = useState<Mode>(Mode.VIEW);\n\n  const toggleMode = (newMode: Mode) => {\n    setMode(newMode);\n  };\n\n  return (\n    <li\n      className=\"TodoItem\"\n      onMouseEnter={() => setIsHoveredOn(true)}\n      onMouseLeave={() => setIsHoveredOn(false)}\n      onDoubleClick={() => toggleMode(Mode.EDIT)}\n    >\n      <div className=\"TodoItem__content\">\n        <TodoCheckBox id={id} isChecked={completed} />\n\n        {mode === Mode.VIEW ? (\n          <p className=\"TodoItem__title\">{title}</p>\n        ) : (\n          <EditTodo id={id} title={title} toggleMode={toggleMode} />\n        )}\n      </div>\n\n      {isHoveredOn && (\n        <button\n          type=\"button\"\n          className=\"TodoItem__delete-btn\"\n          onClick={() => dispatchTodos({ type: Action.DELETE_TODO, payload: id })}\n        >\n          <img\n            src={deleteIcon}\n            alt=\"Delete\"\n            className=\"TodoItem__delete-icon\"\n          />\n        </button>\n      )}\n    </li>\n  );\n};\n\nexport { TodoItem };\n","import { TodoItem } from '../TodoItem';\n\nimport { ITodo } from '../../lib/types/ITodo';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: ITodo[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"TodoList\">\n      {todos.map(({ id, title, completed }) => (\n        <TodoItem\n          key={id}\n          id={id}\n          title={title}\n          completed={completed}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport { TodoList };\n","import { Link } from 'react-router-dom';\n\nimport './TodoFilter.scss';\n\nconst TodoFilter = () => {\n  return (\n    <div className=\"TodoFilter\">\n      <Link to=\"/\" className=\"TodoFilter__status\">All</Link>\n      <Link to=\"/?status=uncompleted\" className=\"TodoFilter__status\">Uncompleted</Link>\n      <Link to=\"/?status=completed\" className=\"TodoFilter__status\">Completed</Link>\n    </div>\n  );\n};\n\nexport { TodoFilter };\n","import { useSearchParams } from 'react-router-dom';\n\nimport { Action } from './lib/enums/Action';\nimport { Status } from './lib/enums/Status';\nimport { ITodo } from './lib/types/ITodo';\nimport { useTodoContext } from './lib/shared/TodoContext';\n\nimport { TodoAdd } from './components/TodoAdd';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n\nimport './TodoApp.scss';\n\nfunction getVisibleTodos(todos: ITodo[], todoStatus: Status) {\n  switch (todoStatus) {\n    case Status.COMPLETED:\n      return todos.filter((todo) => todo.completed);\n\n    case Status.UNCOMPLETED:\n      return todos.filter((todo) => !todo.completed);\n\n    default:\n      return todos;\n  }\n}\n\nconst TodoApp = () => {\n  const [searchParams] = useSearchParams();\n  const { todos, dispatchTodos } = useTodoContext();\n  const todoStatus = searchParams.get('status') || Status.ALL;\n\n  const visibleTodos: ITodo[] = getVisibleTodos(todos, todoStatus as Status);\n  const activeTodos = todos.filter((todo) => !todo.completed).length;\n\n  return (\n    <div className=\"TodoApp\">\n      <article className=\"TodoApp__todo-app\">\n        <TodoAdd className=\"TodoApp__todo-add\" />\n\n        <div className=\"TodoApp__upper-actions\">\n          <div className=\"TodoApp__upper-actions-wrapper\">\n            <button\n              type=\"button\"\n              className=\"TodoApp__upper-action TodoApp__upper-action--complete\"\n              onClick={() => dispatchTodos({ type: Action.COMPLETE_ALL_TODOS })}\n            >\n              Complete all tasks\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"TodoApp__upper-action TodoApp__upper-action--clear\"\n              onClick={() => dispatchTodos({ type: Action.CLEAR_COMPLETED_TODOS })}\n            >\n              Clear completed\n            </button>\n          </div>\n        </div>\n\n        {visibleTodos.length > 0 && <TodoList todos={visibleTodos} />}\n\n        <div className=\"TodoApp__lower-actions\">\n          <p className=\"TodoApp__todos-left\">\n            <span className=\"TodoApp__todos-count\">{activeTodos}</span>\n            tasks left\n          </p>\n\n          <TodoFilter />\n        </div>\n      </article>\n    </div>\n  );\n};\n\nexport { TodoApp };\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { TodoApp } from './TodoApp';\nimport { TodoProvider } from './lib/shared/TodoContext';\n\nimport './lib/reset.scss';\n\nReactDOM.render(\n  <Router>\n    <TodoProvider>\n      <TodoApp />\n    </TodoProvider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}